{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Actor Critic","provenance":[],"authorship_tag":"ABX9TyNsbQcC/Nf4OXjMRWM/wAYM"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"2PsMpSrk0Gqk","executionInfo":{"status":"ok","timestamp":1619937826708,"user_tz":-270,"elapsed":4395,"user":{"displayName":"ali ghandi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgpQfDUUwGAY8UikVPosVH-EO9X3F39efNCaXLmxA=s64","userId":"08717455413485940524"}}},"source":["import gym\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","\n","# Configuration parameters for the whole setup\n","seed = 42\n","gamma = 0.99  # Discount factor for past rewards\n","max_steps_per_episode = 10000\n","env = gym.make(\"CartPole-v0\")  # Create the environment\n","env.seed(seed)\n","eps = np.finfo(np.float32).eps.item()  # Smallest number such that 1.0 + eps != 1.0"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"KuUFmvuU0TTk","executionInfo":{"status":"ok","timestamp":1619937826711,"user_tz":-270,"elapsed":4384,"user":{"displayName":"ali ghandi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgpQfDUUwGAY8UikVPosVH-EO9X3F39efNCaXLmxA=s64","userId":"08717455413485940524"}}},"source":["num_inputs = 4\n","num_actions = 2\n","num_hidden = 128\n","\n","inputs = layers.Input(shape=(num_inputs,))\n","common = layers.Dense(num_hidden, activation=\"relu\")(inputs)\n","action = layers.Dense(num_actions, activation=\"softmax\")(common)\n","critic = layers.Dense(1)(common)\n","\n","model = keras.Model(inputs=inputs, outputs=[action, critic])"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"v1EJQrfQ0Tyz","executionInfo":{"status":"error","timestamp":1619938687515,"user_tz":-270,"elapsed":167801,"user":{"displayName":"ali ghandi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgpQfDUUwGAY8UikVPosVH-EO9X3F39efNCaXLmxA=s64","userId":"08717455413485940524"}},"outputId":"118f3e5b-cc3a-4bd9-fc3d-6554a854aea8"},"source":["optimizer = keras.optimizers.Adam(learning_rate=0.01)\n","huber_loss = keras.losses.Huber()\n","action_probs_history = []\n","critic_value_history = []\n","rewards_history = []\n","running_reward = 0\n","episode_count = 0\n","\n","while True:  # Run until solved\n","    state = env.reset()\n","    episode_reward = 0\n","    with tf.GradientTape() as tape:\n","        for timestep in range(1, max_steps_per_episode):\n","            # env.render(); Adding this line would show the attempts\n","            # of the agent in a pop up window.\n","\n","            state = tf.convert_to_tensor(state)\n","            state = tf.expand_dims(state, 0)\n","\n","            # Predict action probabilities and estimated future rewards\n","            # from environment state\n","            action_probs, critic_value = model(state)\n","            critic_value_history.append(critic_value[0, 0])\n","\n","            # Sample action from action probability distribution\n","            action = np.random.choice(num_actions, p=np.squeeze(action_probs))\n","            action_probs_history.append(tf.math.log(action_probs[0, action]))\n","\n","            # Apply the sampled action in our environment\n","            state, reward, done, _ = env.step(action)\n","            rewards_history.append(reward)\n","            episode_reward += reward\n","\n","            if done:\n","                break\n","\n","        # Update running reward to check condition for solving\n","        running_reward = 0.05 * episode_reward + (1 - 0.05) * running_reward\n","\n","        # Calculate expected value from rewards\n","        # - At each timestep what was the total reward received after that timestep\n","        # - Rewards in the past are discounted by multiplying them with gamma\n","        # - These are the labels for our critic\n","        returns = []\n","        discounted_sum = 0\n","        for r in rewards_history[::-1]:\n","            discounted_sum = r + gamma * discounted_sum\n","            returns.insert(0, discounted_sum)\n","\n","        # Normalize\n","        returns = np.array(returns)\n","        returns = (returns - np.mean(returns)) / (np.std(returns) + eps)\n","        returns = returns.tolist()\n","\n","        # Calculating loss values to update our network\n","        history = zip(action_probs_history, critic_value_history, returns)\n","        actor_losses = []\n","        critic_losses = []\n","        for log_prob, value, ret in history:\n","            # At this point in history, the critic estimated that we would get a\n","            # total reward = `value` in the future. We took an action with log probability\n","            # of `log_prob` and ended up recieving a total reward = `ret`.\n","            # The actor must be updated so that it predicts an action that leads to\n","            # high rewards (compared to critic's estimate) with high probability.\n","            diff = ret - value\n","            actor_losses.append(-log_prob * diff)  # actor loss\n","\n","            # The critic must be updated so that it predicts a better estimate of\n","            # the future rewards.\n","            critic_losses.append(\n","                huber_loss(tf.expand_dims(value, 0), tf.expand_dims(ret, 0))\n","            )\n","\n","        # Backpropagation\n","        loss_value = sum(actor_losses) + sum(critic_losses)\n","        grads = tape.gradient(loss_value, model.trainable_variables)\n","        optimizer.apply_gradients(zip(grads, model.trainable_variables))\n","\n","        # Clear the loss and reward history\n","        action_probs_history.clear()\n","        critic_value_history.clear()\n","        rewards_history.clear()\n","\n","    # Log details\n","    episode_count += 1\n","    if episode_count % 10 == 0:\n","        template = \"running reward: {:.2f} at episode {}\"\n","        print(template.format(running_reward, episode_count))\n","\n","    if running_reward > 195:  # Condition to consider the task solved\n","        print(\"Solved at episode {}!\".format(episode_count))\n","        break"],"execution_count":3,"outputs":[{"output_type":"stream","text":["running reward: 18.56 at episode 10\n","running reward: 33.66 at episode 20\n","running reward: 41.49 at episode 30\n","running reward: 57.71 at episode 40\n","running reward: 65.61 at episode 50\n","running reward: 88.52 at episode 60\n","running reward: 103.32 at episode 70\n","running reward: 103.06 at episode 80\n","running reward: 78.08 at episode 90\n","running reward: 72.56 at episode 100\n","running reward: 84.93 at episode 110\n","running reward: 108.96 at episode 120\n","running reward: 122.14 at episode 130\n","running reward: 150.45 at episode 140\n","running reward: 170.33 at episode 150\n","running reward: 182.24 at episode 160\n","running reward: 179.60 at episode 170\n","running reward: 129.07 at episode 180\n","running reward: 124.53 at episode 190\n","running reward: 140.52 at episode 200\n","running reward: 153.91 at episode 210\n","running reward: 172.40 at episode 220\n","running reward: 183.48 at episode 230\n","running reward: 190.11 at episode 240\n"],"name":"stdout"},{"output_type":"stream","text":["ERROR:root:Internal Python error in the inspect module.\n","Below is the traceback from this internal error.\n","\n"],"name":"stderr"},{"output_type":"stream","text":["Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py\", line 2882, in run_code\n","    exec(code_obj, self.user_global_ns, self.user_ns)\n","  File \"<ipython-input-3-452ffcdb0a32>\", line 76, in <module>\n","    grads = tape.gradient(loss_value, model.trainable_variables)\n","  File \"/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/backprop.py\", line 1086, in gradient\n","    unconnected_gradients=unconnected_gradients)\n","  File \"/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/imperative_grad.py\", line 77, in imperative_grad\n","    compat.as_str(unconnected_gradients.value))\n","  File \"/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/backprop.py\", line 161, in _gradient_function\n","    with ops.name_scope(gradient_name_scope):\n","  File \"/usr/local/lib/python3.7/dist-packages/tensorflow/python/framework/ops.py\", line 6431, in name_scope\n","    return NullContextmanager()\n","  File \"/usr/local/lib/python3.7/dist-packages/tensorflow/python/framework/ops.py\", line 169, in __init__\n","    def __init__(self, *args, **kwargs):\n","KeyboardInterrupt\n","\n","During handling of the above exception, another exception occurred:\n","\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py\", line 1823, in showtraceback\n","    stb = value._render_traceback_()\n","AttributeError: 'KeyboardInterrupt' object has no attribute '_render_traceback_'\n","\n","During handling of the above exception, another exception occurred:\n","\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.7/dist-packages/IPython/core/ultratb.py\", line 1132, in get_records\n","    return _fixed_getinnerframes(etb, number_of_lines_of_context, tb_offset)\n","  File \"/usr/local/lib/python3.7/dist-packages/IPython/core/ultratb.py\", line 313, in wrapped\n","    return f(*args, **kwargs)\n","  File \"/usr/local/lib/python3.7/dist-packages/IPython/core/ultratb.py\", line 358, in _fixed_getinnerframes\n","    records = fix_frame_records_filenames(inspect.getinnerframes(etb, context))\n","  File \"/usr/lib/python3.7/inspect.py\", line 1502, in getinnerframes\n","    frameinfo = (tb.tb_frame,) + getframeinfo(tb, context)\n","  File \"/usr/lib/python3.7/inspect.py\", line 1460, in getframeinfo\n","    filename = getsourcefile(frame) or getfile(frame)\n","  File \"/usr/lib/python3.7/inspect.py\", line 696, in getsourcefile\n","    if getattr(getmodule(object, filename), '__loader__', None) is not None:\n","  File \"/usr/lib/python3.7/inspect.py\", line 742, in getmodule\n","    os.path.realpath(f)] = module.__name__\n","  File \"/usr/lib/python3.7/posixpath.py\", line 395, in realpath\n","    path, ok = _joinrealpath(filename[:0], filename, {})\n","  File \"/usr/lib/python3.7/posixpath.py\", line 429, in _joinrealpath\n","    if not islink(newpath):\n","  File \"/usr/lib/python3.7/posixpath.py\", line 171, in islink\n","    st = os.lstat(path)\n","KeyboardInterrupt\n"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m"]}]},{"cell_type":"code","metadata":{"id":"sUhwrlJl0fgz"},"source":[""],"execution_count":null,"outputs":[]}]}